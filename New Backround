import os, time, json
from flask import Flask, request, jsonify, render_template, session
import sqlite3, requests
from werkzeug.security import generate_password_hash, check_password_hash


# ----------------------
# Flask setup
# ----------------------
app = Flask(__name__)
app.config.update(
SECRET_KEY=os.environ.get("SECRET_KEY", os.urandom(32)),
SESSION_COOKIE_HTTPONLY=True,
SESSION_COOKIE_SAMESITE="Lax",
SESSION_COOKIE_SECURE=os.environ.get("SESSION_COOKIE_SECURE", "false").lower() == "true",
)


DB_PATH = os.environ.get("DB_PATH", "cafes.db")
OVERPASS_URL = os.environ.get("OVERPASS_URL", "https://overpass-api.de/api/interpreter")
NOMINATIM_URL = os.environ.get("NOMINATIM_URL", "https://nominatim.openstreetmap.org/search.php")
NOMINATIM_UA = os.environ.get("NOMINATIM_UA", "CafeScout/1.0 (contact: you@example.com)")


# ----------------------
# DB helpers
# ----------------------


def db():
con = sqlite3.connect(DB_PATH, detect_types=sqlite3.PARSE_DECLTYPES, check_same_thread=False)
con.execute("PRAGMA journal_mode=WAL;")
con.execute("PRAGMA synchronous=NORMAL;")
con.row_factory = sqlite3.Row
return con




def init_db():
con = db(); cur = con.cursor()
# ratings
cur.execute(
"""
CREATE TABLE IF NOT EXISTS ratings(
id INTEGER PRIMARY KEY AUTOINCREMENT,
osm_type TEXT NOT NULL,
osm_id INTEGER NOT NULL,
ts INTEGER NOT NULL,
crowd REAL NOT NULL,
vibe REAL NOT NULL,
clean REAL NOT NULL,
coffee REAL NOT NULL
)
"""
)
cur.execute("CREATE INDEX IF NOT EXISTS idx_r ON ratings(osm_type, osm_id)")


# users
cur.execute(
"""
CREATE TABLE IF NOT EXISTS users(
id INTEGER PRIMARY KEY AUTOINCREMENT,
email TEXT UNIQUE NOT NULL,
password_hash TEXT NOT NULL,
display_name TEXT NOT NULL,
created_at INTEGER NOT NULL
)
"""
)


# comments
app.run(host=os.environ.get("HOST", "127.0.0.1"), port=int(os.environ.get("PORT", 5000)), debug=os.environ.get("FLASK_DEBUG", "1") == "1")
